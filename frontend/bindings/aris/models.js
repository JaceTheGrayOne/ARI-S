// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * RetocOperation represents a Retoc operation
 */
export class RetocOperation {
    /**
     * Creates a new RetocOperation instance.
     * @param {Partial<RetocOperation>} [$$source = {}] - The source object to create the RetocOperation.
     */
    constructor($$source = {}) {
        if (!("command" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["command"] = "";
        }
        if (!("input_path" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["input_path"] = "";
        }
        if (!("output_path" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["output_path"] = "";
        }
        if (!("ue_version" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ue_version"] = "";
        }
        if (!("options" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["options"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RetocOperation instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RetocOperation}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("options" in $$parsedSource) {
            $$parsedSource["options"] = $$createField4_0($$parsedSource["options"]);
        }
        return new RetocOperation(/** @type {Partial<RetocOperation>} */($$parsedSource));
    }
}

/**
 * RetocResult represents the result of a Retoc operation
 */
export class RetocResult {
    /**
     * Creates a new RetocResult instance.
     * @param {Partial<RetocResult>} [$$source = {}] - The source object to create the RetocResult.
     */
    constructor($$source = {}) {
        if (!("success" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["success"] = false;
        }
        if (!("message" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["message"] = "";
        }
        if (!("output" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["output"] = "";
        }
        if (!("error" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["error"] = "";
        }
        if (!("duration" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["duration"] = "";
        }
        if (!("operation_id" in $$source)) {
            /**
             * ID for tracking/cancelling
             * @member
             * @type {string}
             */
            this["operation_id"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RetocResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RetocResult}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new RetocResult(/** @type {Partial<RetocResult>} */($$parsedSource));
    }
}

/**
 * UAssetResult represents the result of a UAsset operation
 */
export class UAssetResult {
    /**
     * Creates a new UAssetResult instance.
     * @param {Partial<UAssetResult>} [$$source = {}] - The source object to create the UAssetResult.
     */
    constructor($$source = {}) {
        if (!("success" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["success"] = false;
        }
        if (!("message" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["message"] = "";
        }
        if (!("output" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["output"] = "";
        }
        if (!("error" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["error"] = "";
        }
        if (!("duration" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["duration"] = "";
        }
        if (!("files_processed" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["files_processed"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UAssetResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {UAssetResult}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UAssetResult(/** @type {Partial<UAssetResult>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
